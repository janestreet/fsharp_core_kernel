#light





namespace Core_kernel.Test
    
    module Error =
        
        val sanitize: str: string -> string
        
        val assert_error_matches: error: Error.t -> pattern: string -> unit
        
        [<NUnit.Framework.Test>]
        val ``Source code position is inserted`` : unit -> unit

namespace Core_kernel.Test
    
    module Time =
        
        val time: System.DateTime
        
        [<NUnit.Framework.Test>]
        val ``Time_float roundtrips`` : unit -> unit
        
        [<NUnit.Framework.Test>]
        val ``Time_ns roundtrips`` : unit -> unit

namespace Core_kernel.Test
    
    module Host_and_port =
        
        [<NUnit.Framework.Test>]
        val ``of_string_exn equal`` : unit -> unit
        
        [<NUnit.Framework.Test>]
        val ``of_string_exn raises`` : unit -> unit

namespace Core_kernel.Test
    
    module Log =
        
        val sanitize_timestamp: string: string -> string
        
        [<NUnit.Framework.Test>]
        val ``printfn_every_n even iterations`` : unit -> unit
        
        [<NUnit.Framework.Test>]
        val ``printfn_every_n based on path/line`` : unit -> unit

namespace Core_kernel.Test
    
    module System_information =
        
        [<NUnit.Framework.Test>]
        val ``Requesting groups does not crash and returns non-empty`` :
          unit -> unit

namespace Core_kernel.Test
    
    module Map =
        
        [<NUnit.Framework.Test>]
        val merge_skewed: unit -> unit

namespace Core_kernel.Test
    
    module Command =
        
        module Req_test =
            
            type t =
                { length: int }
        
        module Opt_test =
            
            type t = string
        
        module No_arg_test =
            
            [<Struct>]
            type t = bool
        
        module Test =
            
            type t = string
        
        val run_test:
          expected_output: string -> param: string Command.Param.t
          -> args: string list -> unit
        
        [<NUnit.Framework.Test; NUnit.Framework.Category ("Command_tests")>]
        val flags: unit -> unit
        
        [<NUnit.Framework.Test; NUnit.Framework.Category ("Command_tests")>]
        val help_test: unit -> unit
        
        [<NUnit.Framework.Test; NUnit.Framework.Category ("Command_tests")>]
        val unknown_flag: unit -> unit
        
        [<NUnit.Framework.Test; NUnit.Framework.Category ("Command_tests")>]
        val no_required_arg: unit -> unit


module AutoGeneratedProgram

[<Microsoft.VisualStudio.TestPlatform.TestSDKAutoGeneratedCode>]
val main: string[] -> int

